# Remove filters and projections between two inner hashjoin nodes in the JSON plan generated by DuckDB.

import json


def is_inner_hash_join(node):
    return node["name"] == "HASH_JOIN" and "INNER" in node["extra_info"]


# Function to recursively traverse and modify the tree structure
def traverse_and_modify(node) -> bool:
    if "children" not in node:
        return False

    modified = False

    children = node["children"]
    for child in children:
        # Check for the first HASH_JOIN node
        if is_inner_hash_join(child) and len(child["children"]) > 0:
            for i, projection_node in enumerate([child["children"][0], child["children"][1]]):
                # Check if the child is a PROJECTION node
                if projection_node["name"] == "PROJECTION" and len(projection_node["children"]) > 0:
                    filter_node = projection_node["children"][0]

                    # Check if the child of PROJECTION is a FILTER node
                    if filter_node["name"] == "FILTER" and len(filter_node["children"]) > 0:
                        hashjoin_node_2 = filter_node["children"][0]

                        # Check if the child of FILTER is a HASH_JOIN node
                        if is_inner_hash_join(hashjoin_node_2):
                            # Remove PROJECTION and FILTER, and connect the two HASH_JOIN nodes
                            child["children"][i] = hashjoin_node_2
                            modified = True

        # Recursively apply the function to child nodes
        modified = modified | traverse_and_modify(child)

    return modified  # Return if the tree structure is modified


# Function to load, process, and save the JSON
def process_json_file(infile, outfile, force_write):
    # Load the JSON file
    with open(infile, "r") as file:
        data = json.load(file)

    # Traverse and modify the tree
    modified = traverse_and_modify(data)

    # Save the modified JSON
    if modified or force_write:
        with open(outfile, "w") as file:
            json.dump(data, file, indent=4)


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(
        description="Remove filters and projections between two inner hashjoin nodes in a JSON plan generated by DuckDB."
    )

    parser.add_argument(
        "-i", "--inputfile", type=str, help="Input JSON file path (generated by DuckDB)"
    )
    parser.add_argument("-o", "--outputfile", type=str, help="Output JSON file path")

    # boolean indicating whether to write the output to a file if nothing is modified
    parser.add_argument(
        "-f",
        "--force_write",
        action="store_true",  # default to false if not provided
        help="Write the output even if no modifications are made",
    )

    args = parser.parse_args()

    process_json_file(args.inputfile, args.outputfile, args.force_write)
